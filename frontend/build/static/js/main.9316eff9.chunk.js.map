{"version":3,"sources":["services/quotes.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","quotes","getLatest","axios","get","then","response","data","create","newObject","post","App","useState","theyQuote","setTheyQuote","youQuoteContent","setYouQuoteContent","useEffect","quoteService","latestQuote","className","content","onSubmit","event","preventDefault","youQuote","returnedNote","value","onChange","target","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAEMA,EAAU,cAmBDC,EAJA,CACXC,UAZc,WAEd,OADgBC,IAAMC,IAAN,UAAaJ,EAAb,YACDK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAWzCC,OAPW,SAAAC,GAEX,OADgBN,IAAMO,KAAKV,EAASS,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,U,eC4D9BI,EAtEH,WAAO,IAAD,EAEkBC,mBAAS,IAF3B,mBAETC,EAFS,KAEEC,EAFF,OAG8BF,mBAAS,IAHvC,mBAGTG,EAHS,KAGQC,EAHR,KAgBhBC,qBAT2B,WACzBC,EACGhB,YACAG,MAAK,SAAAc,GACJL,EAAaK,QAKW,IA8B9B,OACE,sBAAKC,UAAU,SAAf,UAEE,4CACA,mCAAMP,EAAUQ,QAAhB,OACA,oBAAID,UAAU,QAAd,oBAEA,uBAEA,0CAEA,uBAAME,SAhCY,SAACC,GAErBA,EAAMC,iBAEN,IAAMC,EAAW,CACfJ,QAASN,GAMXG,EACGV,OAAOiB,GACPpB,MAAK,SAAAqB,GACJZ,EAAaY,GACbV,EAAmB,QAiBrB,UACE,uBACEW,MAAOZ,EACPa,SAvCmB,SAACL,GAC1BP,EAAmBO,EAAMM,OAAOF,UAyC5B,wBAAQG,KAAK,SAAb,8BCvDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9316eff9.chunk.js","sourcesContent":["import axios from 'axios'\n//both frontend and backend have same address\nconst baseUrl = '/api/quotes'\n\n//get the latest quote\n//can stack thens because they return promises\nconst getLatest = () => {\n    const request = axios.get(`${baseUrl}/latest`)\n    return request.then(response => response.data)\n}\n\n//create a new quote\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst quotes = {\n    getLatest,\n    create\n}\nexport default quotes","import { useEffect, useState } from 'react';\nimport quoteService from './services/quotes'\nimport './css/App.css'\n\nconst App = () => {\n\n  const [theyQuote, setTheyQuote] = useState({})\n  const [youQuoteContent, setYouQuoteContent] = useState('')\n  \n  //EFFECTS\n  \n  const getLatestTheyQuote = () => {\n    quoteService\n      .getLatest()\n      .then(latestQuote => {\n        setTheyQuote(latestQuote)\n      })\n  }\n  \n  //only runs once when page is loaded?\n  useEffect(getLatestTheyQuote, [])\n  \n  //FUNCTIONS\n  \n  //keep the input value and youString in sync\n  const changeInputHandler = (event) => {\n    setYouQuoteContent(event.target.value)\n  }\n  \n  const sumbitHandler = (event) => {\n    //prevent page reloading\n    event.preventDefault()\n    \n    const youQuote = {\n      content: youQuoteContent\n    }\n\n    //send new quote to backend\n    //set returned quote to theyQuote\n    //reset youQuoteContent\n    quoteService\n      .create(youQuote)\n      .then(returnedNote => {\n        setTheyQuote(returnedNote)\n        setYouQuoteContent('')\n      })\n    \n    //close window?\n  }\n\n  return (\n    <div className=\"center\">\n\n      <h1>They Said:</h1>\n      <h2>\"{theyQuote.content}\"</h2>\n      <h3 className=\"quote\">- them</h3>\n    \n      <hr />\n\n      <h1>You Say:</h1>\n\n      <form onSubmit={sumbitHandler}>\n        <input\n          value={youQuoteContent}\n          onChange={changeInputHandler}\n        >\n        </input>\n        <button type=\"submit\">tell them</button>\n      </form>\n\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}